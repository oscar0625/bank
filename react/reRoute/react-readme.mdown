以下是react 3.x版本的路由

1.安装路由插件
  命令：npm install react-router@3.0.2 --save  制定版本3.x的版本
2.引入：
  代码：import {Router,Route,hashHistory,Link} from "react-router";
3.配置：(root.js)
  <Router history={hashHistory}>
    <Route path="/" component={Index}></Route>
  </Router>
  history:历史记录;
    1.browserHistory
    如果设为browserHistory，浏览器的路由就不再通过Hash完成了，而显示正常的路径example.com/some/path，背后调用的是浏览器的History API。
    2.hashHistory
    如果设为hashHistory，路由将通过URL的hash部分（#）切换，
    URL的形式类似example.com/#/some/path。
    3.createMemoryHistory
    主要用于服务器渲染。它创建一个内存中的history对象，不与浏览器URL互动

  path:指定路径，如果是“/”指定根目录
  component:指定要加载的组件
4.指定Link: (index.js)
  <Link to={`/java/`}>
    <button>前往java页面</button>
  </Link>
  to:去java页面

  IndexLink :链接到根路由/
    <IndexLink to={`/`}> 推荐 </IndexLink>
5.页面跳转携带参数
  1.在path中加入参数：path="/java/:id"
  2.在to里面加入值：to={`/java/${'top  '}`}
  3.在对应的页面接收参数：  {this.props.params.id}

6 bug
    react-router3.x  hashHistory 传递参数render会执行两次的bug
    解决方案：
    shouldComponentUpdate(){
            return (this.props.router.location.action === 'PUSH')
    }
  -----------------------------------------------------------------------------
  嵌套路由：
  1.引入IndexRoute
        import {IndexRoute} from 'react-router';
  2.配置
       路由配置:
       <Router history={hashHistory}>
            <Route path="/" component={MobileIndex}>
               <IndexRoute component={IndexContent}/>   //进路就会加载的子组件
               <Route path="/other/:type/:count/:title" component={OtherContent}></Route> //路由跳转加载的组件1
               <Route path="/else/:type/:count/:title" component={ElseContent}></Route> //路由跳转加载的组件2
            </Route>
       </Router>

       MobileIndex配置:
       render(){
               return(
                   <div>
                       <Header />
                       {this.props.children}  //子路由会显示在该位置
                   </div>
               )
           }
  -----------------------------------------------------------------------------

  以下是react 4.x版本的路由
  1.安装路由插件
    命令：npm install react-router-dom --save-dev
  2.引入：
    代码：import {BrowserRouter,HashRouter,MemoryRouter,Route,Link} from "react-router-dom";
  3.配置：HashRouter==<Router history={hashHistory}>  //里面只能有一个子元素
        <HashRouter >
            <div>
                <Route exact path="/" component={A}/>
                <Route path="/b" component={B}/>
                <Route path="/c" component={C}/>
            </div>
        </HashRouter >
      path:指定路径，如果是“/”指定根目录
      component:指定要加载的组件
  4.1 指定Link:
    <Link to="/b" ></Link>
    <Link to={{pathname: '/b',search: '?sort=name',hash: '#the-hash',state: {name:'oscar'}}}/>

  4.2 Redirect
   <Route exact path="/" render={()=>(this.state.asd?(<Redirect to="/b"/>):(<A />))} />
   <Redirect to="/b"/> //一读就会跳到b
  5.页面跳转携带参数
   1.在path中加入参数：path="/b/:id"
   2.在to里面加入值：to={`/b/${16}`}
   3.在对应的页面接收参数：  {this.props.match.params.id}
  6.Route
    <Route path="/c" render={({match})=>(
        <li className={match ? 'active' : ''}>
            <Link to={`/c/1`} />
        </li>
    )}/>
  7.没有嵌套路由：

  -----------------------------------------------------------------------------

解决KEY报错 给每个KEY一个唯一的值
  <div key={x.uniquekey}>11</div>

  -----------------------------------------------------------------------------
Fetch
1.使用fetch安装
    命令：npm install fetch --save
  2.应用实例
     //get 参数写在url上
     var myFetchOptions = {
      method:"get"
    }
     //post 参数写在 body里
     var myFetchOptions = {
         method:'post',
         body:'type=yule&count=10',
         headers:{
             "Content-Type":"application/x-www-form-urlencoded"
         }
       }
    fetch("url",myFetchOptions)
    .then(response => response.json())
    .then(json =>{
      this.setState({data:json})
    })
  --------------------------------------------------------------------

Antd：
  地址：https://ant.design/index-cn

1.安装：
  命令：npm install --save-dev antd babel-plugin-add-module-exports babel-plugin-transform-object-assign babel-preset-stage-0
2.应用：
  1.引入样式
    import 'antd/dist/antd.css';
  2.引入文件
    import {Button,Menu} from "Antd";

  --------------------------------------------------------------------

 react-responsive:
 1.安装：
   命令：npm install --save-dev react-responsive
 2 引入
    import MediaQuery from 'react-responsive';
 3 使用 <MediaQuery  query='(min-device-width:769px)'></MediaQuery>
        <MediaQuery  query='(max-device-width:768px)'></MediaQuery>
  --------------------------------------------------------------------
 引用swiper
 1.安装：
    命令：npm install --save-dev swiper
  2 引入
     import Swiper from 'swiper';
     import '../../../css/swipe.css';
  3 使用
  html:
        <div className="swiper-container">
            <div className="swiper-wrapper">
                <div className="swiper-slide"><a href=""><img src="http:\/\/iwen.wiki\/zhichenshop\/l4.jpg" alt=""/></a></div>
                <div className="swiper-slide"><a href=""><img src="http:\/\/iwen.wiki\/zhichenshop\/l3.jpg" alt=""/></a></div>
                <div className="swiper-slide"><a href=""><img src="http:\/\/iwen.wiki\/zhichenshop\/l2.jpg" alt=""/></a></div>
                <div className="swiper-slide"><a href=""><img src="http:\/\/iwen.wiki\/zhichenshop\/l1.jpg" alt=""/></a></div>
            </div>

            <div className="swiper-pagination"></div>
        </div>
  js: 注：必须在react的声明周期函数内使用
        componentDidMount(){
            var swiper = new Swiper('.swiper-container', {
                /*base*/
                speed:500,//滑动速度
                autoplay: 2000,//是否自动滑动及间隔时间,
                autoHeight:true, //自动高度,wrapper和container会随着当前slide的高度而发生变化。
                effect:'cube', //slide的切换效果，默认为"slide"（位移切换），可设置为"fade"（淡入）"cube"（方块）"coverflow"（3d流）"flip"（3d翻转）。

                /*分页及导航按钮*/
                pagination: '.swiper-pagination',//设置分页(小圆点)
                paginationClickable: true,//设置点击小圆点切换

            });
        }

